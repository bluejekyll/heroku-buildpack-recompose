#!/usr/bin/env bash

# don't fail fast
#set -eu

# Enable job control
set -m

process_slug() {
  local app_release=${1}

  echo "--> Processing $app_release"

  local app_release_array=($app_release)
  local app=${app_release_array[0]}
  local release=${app_release_array[1]}

  local slug_id=$(curl --retry 3 -s -n https://api.heroku.com/apps/$app/releases/$release \
    -H "Accept: application/vnd.heroku+json; version=3" | \
    python -c 'import json,sys;obj=json.load(sys.stdin);print obj["slug"]["id"]')

  if [ -n "$slug_id" ]; then
    local slug_url=$(curl --retry 3 -s -n https://api.heroku.com/apps/$app/slugs/$slug_id \
      -H "Accept: application/vnd.heroku+json; version=3" | \
      python -c 'import json,sys;obj=json.load(sys.stdin);print obj["blob"]["url"]')

    if [ -n "$slug_url" ]; then
      echo "--> Downloading slug ${slug_id} for ${app}"
      curl --retry 3 -s -L "${slug_url}" | \
          tar xzm --strip-components=1 -C . 2>&1 | \
          grep -v "Ignoring unknown extended header keyword" &
    else
      echo "! ERROR: could not find slug $slug_id for $app_release"
    fi
  else
    echo "! ERROR: could not find release v${release} for ${app}"
  fi
}

wait_for_downloads() {
  local job_count=$1
  local message=$2
  for i in $(seq 1 1 $job_count); do fg $((i+1)) > /dev/null 2>&1; done
  echo $2
}

[ -z "$HEROKU_API_KEY" ] && echo " ! ERROR: missing HEROKU_API_KEY config var" && exit 1
[ -z "$HEROKU_API_USER" ] && echo " ! ERROR: missing HEROKU_API_USER config var" && exit 1

if [ -f .nginx/bin/nginx-start ]; then
  cd .nginx > /dev/null 2>&1
  eval "bin/nginx-start &"
  pid=$!
  cd - > /dev/null 2>&1
  trap "kill -9 $pid; exit" SIGKILL
else
  echo "No .nginx/bin/nginx-start file found!"
fi

# create netrc
cat >> $HOME/.netrc <<EOF
machine api.heroku.com
  login $HEROKU_API_USER
  password $HEROKU_API_KEY
EOF

echo "" >> Appfile

echo "Reading primary parts Appfile..."
apps=0
while read app_release; do
  if [ -n "$app_release" ] && [ "$app_release" != "---" ]; then
    process_slug "$app_release"
    apps=$((apps+1))
  fi
done </app/Appfile

echo "--> Done reading primary parts from Appfile"
wait_for_downloads $apps "All primary downloads finished"

echo "Reading overlay parts from Appfile..."
overlay=0
while read app_release; do
  if [ -n "$app_release" ] && [ $overlay = 1 ]; then
    process_slug "$app_release"
  elif [ "$app_release" = "---" ]; then
    overlay=1
  fi
done </app/Appfile
if [ $overlay = 1 ]; then
  echo "--> Done reading overlay parts from Appfile"
  wait_for_downloads 1 "All overlay downloads finished"
else
  echo "No overlay parts found"
fi

rm $HOME/.netrc

echo "true" > $HOME/.recompose

if [ -n "$WEB_PROCESS_CMD" ]; then
  eval "${WEB_PROCESS_CMD} &"
  app_pid=$!
  trap "kill -9 $app_pid; exit" SIGKILL
fi

while kill -0 $pid; do sleep 5; done
